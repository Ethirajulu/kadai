name: Deploy to Production

on:
  push:
    branches: [main]
    tags: ['v*']

env:
  NODE_VERSION: '22.16.0'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '9.15.1'

jobs:
  # =============================================================================
  # Build and Deploy
  # =============================================================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm nx run-many --target=build --all --parallel=3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Deploy to AWS
        run: |
          echo "Deployment to AWS would be implemented here"
          # This would typically involve:
          # 1. Pushing Docker images to ECR
          # 2. Updating ECS services
          # 3. Running database migrations
          # 4. Updating load balancer configurations
          # 5. Running smoke tests

  # =============================================================================
  # Database Migrations
  # =============================================================================
  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run migrations
        run: |
          echo "Database migrations would be run here"
          # This would typically involve:
          # 1. Running TypeORM migrations
          # 2. Seeding initial data
          # 3. Updating indexes
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}

  # =============================================================================
  # Smoke Tests
  # =============================================================================
  smoke-tests:
    name: Production Smoke Tests
    runs-on: ubuntu-latest
    needs: [migrate]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run smoke tests
        run: |
          echo "Smoke tests would be run here"
          # This would typically involve:
          # 1. Health check endpoints
          # 2. Basic API functionality
          # 3. Database connectivity
          # 4. External service integrations
        env:
          API_BASE_URL: ${{ secrets.PROD_API_URL }}

  # =============================================================================
  # Notification
  # =============================================================================
  notify:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: always()

    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Deployment to production completed with status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
